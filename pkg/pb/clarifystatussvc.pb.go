// Code generated by protoc-gen-go.
// source: clarifystatussvc.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	clarifystatussvc.proto

It has these top-level messages:
	ServiceLocationRequest
	ServiceLocationReply
	HostStatusRequest
	HostStatusReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HostStatusReply_Host_HostStatus int32

const (
	HostStatusReply_Host_STOPPED     HostStatusReply_Host_HostStatus = 0
	HostStatusReply_Host_PENDING     HostStatusReply_Host_HostStatus = 1
	HostStatusReply_Host_MIXED       HostStatusReply_Host_HostStatus = 2
	HostStatusReply_Host_STARTED     HostStatusReply_Host_HostStatus = 3
	HostStatusReply_Host_UNALLOCATED HostStatusReply_Host_HostStatus = 4
)

var HostStatusReply_Host_HostStatus_name = map[int32]string{
	0: "STOPPED",
	1: "PENDING",
	2: "MIXED",
	3: "STARTED",
	4: "UNALLOCATED",
}
var HostStatusReply_Host_HostStatus_value = map[string]int32{
	"STOPPED":     0,
	"PENDING":     1,
	"MIXED":       2,
	"STARTED":     3,
	"UNALLOCATED": 4,
}

func (x HostStatusReply_Host_HostStatus) String() string {
	return proto.EnumName(HostStatusReply_Host_HostStatus_name, int32(x))
}
func (HostStatusReply_Host_HostStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0, 0}
}

type ServiceLocationRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	ServiceTag  string `protobuf:"bytes,2,opt,name=serviceTag" json:"serviceTag,omitempty"`
	Healthy     bool   `protobuf:"varint,3,opt,name=healthy" json:"healthy,omitempty"`
}

func (m *ServiceLocationRequest) Reset()                    { *m = ServiceLocationRequest{} }
func (m *ServiceLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceLocationRequest) ProtoMessage()               {}
func (*ServiceLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceLocationRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceLocationRequest) GetServiceTag() string {
	if m != nil {
		return m.ServiceTag
	}
	return ""
}

func (m *ServiceLocationRequest) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

type ServiceLocationReply struct {
	Locations []*ServiceLocationReply_ServiceLocation `protobuf:"bytes,1,rep,name=locations" json:"locations,omitempty"`
}

func (m *ServiceLocationReply) Reset()                    { *m = ServiceLocationReply{} }
func (m *ServiceLocationReply) String() string            { return proto.CompactTextString(m) }
func (*ServiceLocationReply) ProtoMessage()               {}
func (*ServiceLocationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceLocationReply) GetLocations() []*ServiceLocationReply_ServiceLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type ServiceLocationReply_ServiceLocation struct {
	ServiceHost string `protobuf:"bytes,1,opt,name=serviceHost" json:"serviceHost,omitempty"`
	ServicePort int64  `protobuf:"varint,2,opt,name=servicePort" json:"servicePort,omitempty"`
}

func (m *ServiceLocationReply_ServiceLocation) Reset()         { *m = ServiceLocationReply_ServiceLocation{} }
func (m *ServiceLocationReply_ServiceLocation) String() string { return proto.CompactTextString(m) }
func (*ServiceLocationReply_ServiceLocation) ProtoMessage()    {}
func (*ServiceLocationReply_ServiceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *ServiceLocationReply_ServiceLocation) GetServiceHost() string {
	if m != nil {
		return m.ServiceHost
	}
	return ""
}

func (m *ServiceLocationReply_ServiceLocation) GetServicePort() int64 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

type HostStatusRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=jobName" json:"jobName,omitempty"`
}

func (m *HostStatusRequest) Reset()                    { *m = HostStatusRequest{} }
func (m *HostStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*HostStatusRequest) ProtoMessage()               {}
func (*HostStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HostStatusRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type HostStatusReply struct {
	Hosts []*HostStatusReply_Host `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	Error string                  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *HostStatusReply) Reset()                    { *m = HostStatusReply{} }
func (m *HostStatusReply) String() string            { return proto.CompactTextString(m) }
func (*HostStatusReply) ProtoMessage()               {}
func (*HostStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HostStatusReply) GetHosts() []*HostStatusReply_Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *HostStatusReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type HostStatusReply_Host struct {
	Hostname          string                          `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Status            HostStatusReply_Host_HostStatus `protobuf:"varint,2,opt,name=status,enum=pb.HostStatusReply_Host_HostStatus" json:"status,omitempty"`
	CoordinatorLeader bool                            `protobuf:"varint,3,opt,name=coordinatorLeader" json:"coordinatorLeader,omitempty"`
	ReceiverLeader    bool                            `protobuf:"varint,4,opt,name=receiverLeader" json:"receiverLeader,omitempty"`
}

func (m *HostStatusReply_Host) Reset()                    { *m = HostStatusReply_Host{} }
func (m *HostStatusReply_Host) String() string            { return proto.CompactTextString(m) }
func (*HostStatusReply_Host) ProtoMessage()               {}
func (*HostStatusReply_Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *HostStatusReply_Host) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostStatusReply_Host) GetStatus() HostStatusReply_Host_HostStatus {
	if m != nil {
		return m.Status
	}
	return HostStatusReply_Host_STOPPED
}

func (m *HostStatusReply_Host) GetCoordinatorLeader() bool {
	if m != nil {
		return m.CoordinatorLeader
	}
	return false
}

func (m *HostStatusReply_Host) GetReceiverLeader() bool {
	if m != nil {
		return m.ReceiverLeader
	}
	return false
}

func init() {
	proto.RegisterType((*ServiceLocationRequest)(nil), "pb.ServiceLocationRequest")
	proto.RegisterType((*ServiceLocationReply)(nil), "pb.ServiceLocationReply")
	proto.RegisterType((*ServiceLocationReply_ServiceLocation)(nil), "pb.ServiceLocationReply.ServiceLocation")
	proto.RegisterType((*HostStatusRequest)(nil), "pb.HostStatusRequest")
	proto.RegisterType((*HostStatusReply)(nil), "pb.HostStatusReply")
	proto.RegisterType((*HostStatusReply_Host)(nil), "pb.HostStatusReply.Host")
	proto.RegisterEnum("pb.HostStatusReply_Host_HostStatus", HostStatusReply_Host_HostStatus_name, HostStatusReply_Host_HostStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClarifyControl service

type ClarifyControlClient interface {
	GetHostStatus(ctx context.Context, in *HostStatusRequest, opts ...grpc.CallOption) (*HostStatusReply, error)
	GetServiceLocation(ctx context.Context, in *ServiceLocationRequest, opts ...grpc.CallOption) (*ServiceLocationReply, error)
}

type clarifyControlClient struct {
	cc *grpc.ClientConn
}

func NewClarifyControlClient(cc *grpc.ClientConn) ClarifyControlClient {
	return &clarifyControlClient{cc}
}

func (c *clarifyControlClient) GetHostStatus(ctx context.Context, in *HostStatusRequest, opts ...grpc.CallOption) (*HostStatusReply, error) {
	out := new(HostStatusReply)
	err := grpc.Invoke(ctx, "/pb.ClarifyControl/GetHostStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clarifyControlClient) GetServiceLocation(ctx context.Context, in *ServiceLocationRequest, opts ...grpc.CallOption) (*ServiceLocationReply, error) {
	out := new(ServiceLocationReply)
	err := grpc.Invoke(ctx, "/pb.ClarifyControl/GetServiceLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClarifyControl service

type ClarifyControlServer interface {
	GetHostStatus(context.Context, *HostStatusRequest) (*HostStatusReply, error)
	GetServiceLocation(context.Context, *ServiceLocationRequest) (*ServiceLocationReply, error)
}

func RegisterClarifyControlServer(s *grpc.Server, srv ClarifyControlServer) {
	s.RegisterService(&_ClarifyControl_serviceDesc, srv)
}

func _ClarifyControl_GetHostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClarifyControlServer).GetHostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClarifyControl/GetHostStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClarifyControlServer).GetHostStatus(ctx, req.(*HostStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClarifyControl_GetServiceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClarifyControlServer).GetServiceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClarifyControl/GetServiceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClarifyControlServer).GetServiceLocation(ctx, req.(*ServiceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClarifyControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClarifyControl",
	HandlerType: (*ClarifyControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostStatus",
			Handler:    _ClarifyControl_GetHostStatus_Handler,
		},
		{
			MethodName: "GetServiceLocation",
			Handler:    _ClarifyControl_GetServiceLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clarifystatussvc.proto",
}

func init() { proto.RegisterFile("clarifystatussvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xa6, 0x05, 0x96, 0xe5, 0x10, 0x81, 0x9d, 0x5d, 0x37, 0x4d, 0x4d, 0x0c, 0xa9, 0x89, 0xe1,
	0x42, 0x7b, 0x81, 0xde, 0x19, 0x2f, 0x58, 0x40, 0xdc, 0xa4, 0x42, 0x53, 0xd8, 0xc4, 0xdb, 0x76,
	0x76, 0x94, 0x9a, 0x6e, 0x4f, 0x9d, 0xce, 0x92, 0xf0, 0x02, 0xbe, 0x85, 0x8f, 0xe1, 0xfb, 0xf8,
	0x28, 0xa6, 0xd3, 0x56, 0x66, 0x0b, 0x5c, 0x7e, 0xdf, 0x7c, 0x67, 0xce, 0xf9, 0xce, 0x0f, 0x5c,
	0xd3, 0xc8, 0xe7, 0xe1, 0xb7, 0x5d, 0x2a, 0x7c, 0xf1, 0x98, 0xa6, 0x5b, 0x6a, 0x27, 0x1c, 0x05,
	0x12, 0x3d, 0x09, 0x2c, 0x01, 0xd7, 0x2b, 0xc6, 0xb7, 0x21, 0x65, 0x0e, 0x52, 0x5f, 0x84, 0x18,
	0x7b, 0xec, 0xe7, 0x23, 0x4b, 0x05, 0x19, 0x40, 0x27, 0xcd, 0x5f, 0x16, 0xfe, 0x03, 0x33, 0xb4,
	0x81, 0x36, 0x6c, 0x7b, 0x2a, 0x45, 0x5e, 0x02, 0x14, 0x70, 0xed, 0x7f, 0x37, 0x74, 0x29, 0x50,
	0x18, 0x62, 0x40, 0x6b, 0xc3, 0xfc, 0x48, 0x6c, 0x76, 0x46, 0x7d, 0xa0, 0x0d, 0xcf, 0xbd, 0x12,
	0x5a, 0x7f, 0x34, 0xb8, 0x3a, 0x48, 0x9b, 0x44, 0x3b, 0xf2, 0x09, 0xda, 0x51, 0x41, 0xa4, 0x86,
	0x36, 0xa8, 0x0f, 0x3b, 0xa3, 0xa1, 0x9d, 0x04, 0xf6, 0x31, 0xf1, 0x01, 0xb9, 0x0f, 0x35, 0xef,
	0xa0, 0x57, 0x79, 0x55, 0xfc, 0x7c, 0xc6, 0x54, 0x54, 0xfc, 0x64, 0x94, 0xa2, 0x70, 0x91, 0x0b,
	0x69, 0xa8, 0xee, 0xa9, 0x94, 0xf5, 0x16, 0x2e, 0x32, 0xe5, 0x4a, 0x36, 0xb2, 0x6c, 0x94, 0x01,
	0xad, 0x1f, 0x18, 0x28, 0x4d, 0x2a, 0xa1, 0xf5, 0x57, 0x87, 0x9e, 0xaa, 0xcf, 0x1c, 0xda, 0xd0,
	0xdc, 0x60, 0x2a, 0x4a, 0x77, 0x46, 0xe6, 0xae, 0xa2, 0x91, 0xd8, 0xcb, 0x65, 0xe4, 0x0a, 0x9a,
	0x8c, 0x73, 0xe4, 0x45, 0x7f, 0x73, 0x60, 0xfe, 0xd2, 0xa1, 0x21, 0x6b, 0x36, 0xe1, 0x3c, 0xd3,
	0xc5, 0xfb, 0xec, 0xff, 0x31, 0xf9, 0x00, 0x67, 0xf9, 0xc8, 0x65, 0x6c, 0x77, 0xf4, 0xea, 0x54,
	0x2e, 0x95, 0x2c, 0x42, 0xc8, 0x1b, 0xb8, 0xa0, 0x88, 0xfc, 0x3e, 0x8c, 0x7d, 0x81, 0xdc, 0x61,
	0xfe, 0x3d, 0xe3, 0xc5, 0x18, 0x0f, 0x1f, 0xc8, 0x6b, 0xe8, 0x72, 0x46, 0x59, 0xb8, 0x65, 0xa5,
	0xb4, 0x21, 0xa5, 0x15, 0xd6, 0x5a, 0x02, 0xec, 0x73, 0x91, 0x0e, 0xb4, 0x56, 0xeb, 0xa5, 0xeb,
	0xce, 0xa6, 0xfd, 0x5a, 0x06, 0xdc, 0xd9, 0x62, 0x7a, 0xbb, 0x98, 0xf7, 0x35, 0xd2, 0x86, 0xe6,
	0x97, 0xdb, 0xaf, 0xb3, 0x69, 0x5f, 0xcf, 0x45, 0x63, 0x6f, 0x3d, 0x9b, 0xf6, 0xeb, 0xa4, 0x07,
	0x9d, 0xbb, 0xc5, 0xd8, 0x71, 0x96, 0x93, 0x71, 0x46, 0x34, 0x46, 0xbf, 0x35, 0xe8, 0x4e, 0xf2,
	0xf5, 0x9e, 0x60, 0x2c, 0x38, 0x46, 0xe4, 0x23, 0x3c, 0x9b, 0x33, 0xa1, 0xa4, 0x79, 0x5e, 0xf5,
	0x2d, 0xe7, 0x66, 0x5e, 0x1e, 0x69, 0x87, 0x55, 0x23, 0x0e, 0x90, 0x39, 0x13, 0xd5, 0xed, 0x31,
	0x8f, 0x6e, 0x61, 0xfe, 0x91, 0x71, 0x6a, 0x43, 0xad, 0xda, 0xcd, 0x7b, 0x78, 0x41, 0xf1, 0xc1,
	0xa6, 0x11, 0x43, 0xbb, 0x38, 0x43, 0x9b, 0xe6, 0x85, 0xda, 0x49, 0x70, 0x73, 0xf9, 0xb4, 0x76,
	0x37, 0xbb, 0x4b, 0x57, 0x0b, 0xce, 0xe4, 0x81, 0xbe, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0xcf, 0x87, 0xad, 0xba, 0x03, 0x00, 0x00,
}
